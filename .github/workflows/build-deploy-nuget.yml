name: Build & Deploy NuGet
on:
  workflow_dispatch: # Allow running the workflow manually from the GitHub UI
  push:
    branches:
      - 'main'       # Run the workflow when pushing to the main branch
  pull_request:
    branches:
      - '*'          # Run the workflow for all pull requests
  release:
    types:
      - published    # Run the workflow when a new GitHub release is published

env:
  DOTNET_SKIP_FIRST_TIME_EXPERIENCE: 1
  DOTNET_NOLOGO: true
  NuGetDirectory: ${{ github.workspace}}/nuget
  
defaults:
  run:
    shell: pwsh
 
jobs:
  create_nuget:
    name: "Build & Test"
    runs-on: ubuntu-latest
    steps:
      - name: Detect version
        id: get_version
        run: |
          $SEMVER="${{ startsWith(github.ref, 'refs/tags/v') && github.ref_name || '' }}".ToLower().Replace("v", "")
          echo "VERSION=$SEMVER"
          echo "VERSION=$SEMVER" >> $env:GITHUB_OUTPUT
          
      - name: Show detected version
        run: echo '${{ toJSON(steps.get_version.outputs) }}'

      - name: Checkout repo
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          sparse-checkout: 'nuget'
          sparse-checkout-cone-mode: false
            
      # This step is needed because we can't check out a subdirectory.
      # Therefore, all `nuget/` files should be moved to the project root.
      - name: Move `nuget` files to root
        run: |
          Write-Output "Directory listing BEFORE moving to nuget/"
          Get-ChildItem -Force | Select-Object Mode, LastWriteTime, Length, Name | Format-Table -AutoSize
          Get-ChildItem -Path "nuget" -Force | Move-Item -Destination "."
          Remove-Item -Recurse -Force -Path "nuget"
          
          Write-Output "Directory listing AFTER moving to nuget/"
          Get-ChildItem -Force | Select-Object Mode, LastWriteTime, Length, Name | Format-Table -AutoSize

      - name: Setup .NET Core
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '8.x'
        
      - name: Restore NuGet packages
        run: dotnet restore ./nuget.sln
        
      - name: Build library
        run: dotnet build ./BPITS.Results/BPITS.Results.csproj --configuration Release --no-restore
        
      - name: Build tests
        run: dotnet build ./nuget.sln --configuration Release --no-restore
        
      - name: Run tests
        run: dotnet test --configuration Release --no-restore --no-build --logger "trx;LogFileName=results.trx"

      - name: Publish test results
        uses: dorny/test-reporter@v2.1.0
        if: ${{ !cancelled() }} # run this step even if previous step failed
        with:
          name: xUnit Tests
          path: "BPITS.Results.Tests/TestResults/results.trx"
          reporter: "dotnet-trx"
      
      - name: Package NuGet
        run: dotnet pack --configuration Release --output ${{ env.NuGetDirectory }} /p:Version="${{ steps.get_version.outputs.VERSION != '' && steps.get_version.outputs.VERSION || format('0.0.{0}', github.run_number) }}"

      - name: Store NuGet artifact
        uses: actions/upload-artifact@v4
        with:
          name: nuget
          if-no-files-found: error
          retention-days: 7
          path: ${{ env.NuGetDirectory }}/*.nupkg
          
          
  deploy_nuget:
    # Publish only when creating a GitHub Release
    # https://docs.github.com/en/repositories/releasing-projects-on-github/managing-releases-in-a-repository
    # You can update this logic if you want to manage releases differently
    if: github.event_name == 'release'
    name: Publish NuGet
    runs-on: ubuntu-latest
    needs: [ create_nuget ]
    steps:
      - name: Download NuGet artifact
        uses: actions/download-artifact@v4
        with:
          name: nuget
          path: ${{ env.NuGetDirectory }}
      
      - name: Setup .NET Core
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '8.x'
      
      # Publish all NuGet packages to NuGet.org
      # Use --skip-duplicate to prevent errors if a package with the same version already exists.
      # If you retry a failed workflow, already published packages will be skipped without error.
      - name: Publish NuGet package
        run: |
          foreach($file in (Get-ChildItem "${{ env.NuGetDirectory }}" -Recurse -Include *.nupkg)) {
              dotnet nuget push $file --api-key "${{ secrets.NUGET_API_KEY }}" --source https://api.nuget.org/v3/index.json --skip-duplicate
          }